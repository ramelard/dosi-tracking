% Auto-generated by cameraCalibrator app on 15-Oct-2020
%-------------------------------------------------------

%%
%Calibrate camera
% Define images to process
imageFileNames = {'..\data\calibrationIms2\calibrationIm_000.png',...
    '..\data\calibrationIms2\calibrationIm_001.png',...
    '..\data\calibrationIms2\calibrationIm_002.png',...
    '..\data\calibrationIms2\calibrationIm_003.png',...
    '..\data\calibrationIms2\calibrationIm_004.png',...
    '..\data\calibrationIms2\calibrationIm_005.png',...
    '..\data\calibrationIms2\calibrationIm_006.png',...
    '..\data\calibrationIms2\calibrationIm_007.png',...
    '..\data\calibrationIms2\calibrationIm_008.png',...
    '..\data\calibrationIms2\calibrationIm_009.png',...
    '..\data\calibrationIms2\calibrationIm_010.png',...
    '..\data\calibrationIms2\calibrationIm_011.png',...
    '..\data\calibrationIms2\calibrationIm_012.png',...
    '..\data\calibrationIms2\calibrationIm_013.png',...
    '..\data\calibrationIms2\calibrationIm_014.png',...
    '..\data\calibrationIms2\calibrationIm_015.png',...
    '..\data\calibrationIms2\calibrationIm_016.png',...
    '..\data\calibrationIms2\calibrationIm_017.png',...
    '..\data\calibrationIms2\calibrationIm_018.png',...
    '..\data\calibrationIms2\calibrationIm_019.png',...
    '..\data\calibrationIms2\calibrationIm_020.png',...
    '..\data\calibrationIms2\calibrationIm_021.png',...
    '..\data\calibrationIms2\calibrationIm_022.png',...
    '..\data\calibrationIms2\calibrationIm_023.png',...
    '..\data\calibrationIms2\calibrationIm_024.png',...
    '..\data\calibrationIms2\calibrationIm_025.png',...
    '..\data\calibrationIms2\calibrationIm_026.png',...
    '..\data\calibrationIms2\calibrationIm_027.png',...
    '..\data\calibrationIms2\calibrationIm_028.png',...
    '..\data\calibrationIms2\calibrationIm_029.png',...
    '..\data\calibrationIms2\calibrationIm_030.png',...
    '..\data\calibrationIms2\calibrationIm_031.png',...
    '..\data\calibrationIms2\calibrationIm_032.png',...
    '..\data\calibrationIms2\calibrationIm_033.png',...
    '..\data\calibrationIms2\calibrationIm_034.png',...
    '..\data\calibrationIms2\calibrationIm_035.png',...
    '..\data\calibrationIms2\calibrationIm_036.png',...
    '..\data\calibrationIms2\calibrationIm_037.png',...
    '..\data\calibrationIms2\calibrationIm_038.png',...
    '..\data\calibrationIms2\calibrationIm_039.png',...
    '..\data\calibrationIms2\calibrationIm_040.png',...
    '..\data\calibrationIms2\calibrationIm_041.png',...
    '..\data\calibrationIms2\calibrationIm_042.png',...
    '..\data\calibrationIms2\calibrationIm_043.png',...
    '..\data\calibrationIms2\calibrationIm_044.png',...
    '..\data\calibrationIms2\calibrationIm_045.png',...
    '..\data\calibrationIms2\calibrationIm_046.png',...
    '..\data\calibrationIms2\calibrationIm_047.png',...
    '..\data\calibrationIms2\calibrationIm_048.png',...
    '..\data\calibrationIms2\calibrationIm_049.png',...
    '..\data\calibrationIms2\calibrationIm_050.png',...
    '..\data\calibrationIms2\calibrationIm_051.png',...
    '..\data\calibrationIms2\calibrationIm_052.png',...
    '..\data\calibrationIms2\calibrationIm_054.png',...
    '..\data\calibrationIms2\calibrationIm_055.png',...
    '..\data\calibrationIms2\calibrationIm_056.png',...
    '..\data\calibrationIms2\calibrationIm_057.png',...
    '..\data\calibrationIms2\calibrationIm_058.png',...
    '..\data\calibrationIms2\calibrationIm_059.png',...
    '..\data\calibrationIms2\calibrationIm_060.png',...
    '..\data\calibrationIms2\calibrationIm_061.png',...
    '..\data\calibrationIms2\calibrationIm_062.png',...
    '..\data\calibrationIms2\calibrationIm_063.png',...
    '..\data\calibrationIms2\calibrationIm_064.png',...
    '..\data\calibrationIms2\calibrationIm_065.png',...
    '..\data\calibrationIms2\calibrationIm_066.png',...
    '..\data\calibrationIms2\calibrationIm_067.png',...
    '..\data\calibrationIms2\calibrationIm_068.png',...
    '..\data\calibrationIms2\calibrationIm_069.png',...
    '..\data\calibrationIms2\calibrationIm_070.png',...
    '..\data\calibrationIms2\calibrationIm_071.png',...
    '..\data\calibrationIms2\calibrationIm_072.png',...
    '..\data\calibrationIms2\calibrationIm_073.png',...
    '..\data\calibrationIms2\calibrationIm_074.png',...
    '..\data\calibrationIms2\calibrationIm_075.png',...
    '..\data\calibrationIms2\calibrationIm_076.png',...
    '..\data\calibrationIms2\calibrationIm_077.png',...
    '..\data\calibrationIms2\calibrationIm_078.png',...
    '..\data\calibrationIms2\calibrationIm_079.png',...
    '..\data\calibrationIms2\calibrationIm_080.png',...
    '..\data\calibrationIms2\calibrationIm_081.png',...
    '..\data\calibrationIms2\calibrationIm_082.png',...
    '..\data\calibrationIms2\calibrationIm_083.png',...
    '..\data\calibrationIms2\calibrationIm_084.png',...
    '..\data\calibrationIms2\calibrationIm_085.png',...
    '..\data\calibrationIms2\calibrationIm_086.png',...
    '..\data\calibrationIms2\calibrationIm_087.png',...
    '..\data\calibrationIms2\calibrationIm_088.png',...
    '..\data\calibrationIms2\calibrationIm_090.png',...
    '..\data\calibrationIms2\calibrationIm_091.png',...
    '..\data\calibrationIms2\calibrationIm_092.png',...
    '..\data\calibrationIms2\calibrationIm_093.png',...
    '..\data\calibrationIms2\calibrationIm_094.png',...
    '..\data\calibrationIms2\calibrationIm_095.png',...
    '..\data\calibrationIms2\calibrationIm_096.png',...
    '..\data\calibrationIms2\calibrationIm_097.png',...
    '..\data\calibrationIms2\calibrationIm_098.png',...
    '..\data\calibrationIms2\calibrationIm_099.png',...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);

% Read the first image to obtain image size
originalImage = imread(imageFileNames{1});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 14.5;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors, cameraParams);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage = undistortImage(originalImage, cameraParams);

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')

figure
subplot(121)
imagesc(originalImage)
axis equal
subplot(122)
imagesc(undistortedImage)
axis equal
%%
%Calculate probe coordinates

testDirectory = '..\data\22Oct2020\Accuracy\raw'; %Data directory
imList = dir(fullfile(testDirectory,'accuracyHoriz_Large02*')); %List of images
numRows = 5; %Number of rows in the measurement (5 for large, 7 for small)
checkSize = 14.5;
%%Set the world points Grid size
%14.5 for large, 4.5 for small work well
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
worldProbePoints = generateCheckerboardPoints([4,5], checkSize); 
worldProbePoints(:,3) = zeros(size(worldProbePoints,1),1);
worldCoords = zeros(length(imList),3); %Preallocate for world coordinates
%Spot for first rotation matrix and translation vector
rvec0 = 0;
tvec0 = 0;
warnMsg = '';
%Find world coordinates of each image
for i = 1:length(imList)
    %Image file
    thisIm = imread(fullfile(testDirectory,imList(i).name));
    %Undistort (Works better if you don't use this)
    undistortedIm = undistortImage(thisIm,cameraParams);
    %Find the probe
    [Pcam, boardSize, imagesUsed] = detectCheckerboardPoints(undistortedIm);
%      [warnMsg, warnId] = lastwarn;
%      if ~isempty(warnMsg)
%         h=12; 
%         warnMsg = '';
%      end
    if ~isempty(Pcam) && length(Pcam) == 12
        %Get the camera pose
        [wo,wl] = estimateWorldCameraPose(Pcam, worldProbePoints,cameraParams);
        %Get the extrinsics
        [rvec,tvec]=cameraPoseToExtrinsics(wo,wl);
    else
        %Point of interest is [0,0,0] so only tvec matters
        tvec = [nan,nan,nan];
        rvec = nan;
    end
    if rvec0(1) == 0 && ~isnan(rvec(1))
        rvec0 = rvec;
    end
    if tvec0(1) == 0 && ~isnan(tvec(1))
        tvec0 = tvec;
    end
    %Get the location in world coordinates of the point of interest
    worldCoords(i,:) = tvec;
end
%Transformation matrix from world to camera coordinates
M = zeros(4);
M(1:3,1:3) = rvec0;
M(:,4) = [tvec0';1];
%Invert to get transformation matrix from camera to world coordinates
%relative to first measurement
Minv = pinv(M);

%Use transformation matrix to get relative world coordinates
relWorldCoords = zeros(size(worldCoords));
for j=1:size(worldCoords,1)
    relLoc = Minv*[worldCoords(j,:)';1];
    relWorldCoords(j,:) =relLoc(1:3);
end

%Calculations to get true position values

trueRelLocX = repmat(0:-5:-150,[1,numRows]);
trueRelLocY = repelem(0:-25.4:-(numRows-1)*25.4,length(0:5:150));
trueRelLocZ = zeros(size(trueRelLocX));

%Calculate distance and error metrics
trueDistFromStart = sqrt((trueRelLocX-trueRelLocX(1)).^2 + (trueRelLocY-trueRelLocY(1)).^2);
measDistFromStart = sqrt((relWorldCoords(:,1)-relWorldCoords(1,1)).^2+(relWorldCoords(:,2)-relWorldCoords(1,2)).^2 + (relWorldCoords(:,3)-relWorldCoords(1,3)).^2);
camDistFromStart = sqrt((worldCoords(:,1)-worldCoords(1,1)).^2+(worldCoords(:,2)-worldCoords(1,2)).^2 + (worldCoords(:,3)-worldCoords(1,3)).^2);

err = sqrt((trueDistFromStart - measDistFromStart').^2);
%%
%Plane fitting and rotation
%Fit plane to world data
worldCoordsclean=worldCoords(~isnan(worldCoords(:,1)),:);
trueRelLocX = trueRelLocX(~isnan(worldCoords(:,1)));
trueRelLocY = trueRelLocY(~isnan(worldCoords(:,1)));
trueRelLocZ = trueRelLocZ(~isnan(worldCoords(:,1)));
DM = [worldCoordsclean(:,1), worldCoordsclean(:,2), ones(size(worldCoordsclean(:,3)))];
B = DM\worldCoordsclean(:,3);
%First I need to rotate the plane to the z=0 axis
%Normal to best fit plane
normal0 = [-B(1),-B(2),1];
normal = normal0/norm(normal0);
%Normal to z=0 plane
normalZ = [0,0,1];
%Axis-angle representation
rot_angle = acos(dot(normalZ,normal)); %Rotation angle to rotate plane onto z axis
rot_axis = cross(normalZ,normal); %Axis to rotate around
rot_axis = rot_axis/norm(rot_axis); %Make it a unit vector
axAng = rot_axis*rot_angle; %Set up the rotation vector
rot_mat = rotationVectorToMatrix(axAng); %Calculate rotation matrix
%Rotate the points
rotPts = zeros(size(worldCoordsclean,1),3);
for i = 1:size(worldCoordsclean,1)
    rotPts(i,:) = rot_mat * [worldCoordsclean(i,1);worldCoordsclean(i,2);worldCoordsclean(i,3)];
end
rotPts = rotPts - rotPts(1,:);
%Also set up a rectangle for visualization
rectX = [min(worldCoordsclean(:,1)),min(worldCoordsclean(:,1)),max(worldCoordsclean(:,1)),max(worldCoordsclean(:,1))];
rectY = [min(worldCoordsclean(:,2)),max(worldCoordsclean(:,2)),max(worldCoordsclean(:,2)),min(worldCoordsclean(:,2))];
rectZ = B(1) * rectX + B(2)*rectY + B(3);
rotRect = zeros(length(rectX),3);
for p = 1:length(rectX)
    rotRect(p,:) = rot_mat * [-rectX(p);-rectY(p);-rectZ(p)];
end
rotRect = rotRect - rotRect(1,:);
%Translate the points in the minus Z direction so the best fit plane is at
%z=0
%rotPts(:,3) = rotPts(:,3) - rotRect(1,3);
%Rotate the points about the z axis so the measurements are aligned with
%the x axis
pts2D = rotPts(:,1:2);
lastLine = rotPts(1:31,:); %Use the last line b/c it's the straightest
lm=polyfit(lastLine(:,1),lastLine(:,2),1);
ang2D = atan(lm(1)); %angle to rotate around
rotMat2D = rotationVectorToMatrix([0,0,ang2D]); %Rotation matrix
%Calculate final points
finPts = zeros(size(worldCoordsclean));
for i = 1:size(worldCoordsclean,1)
    finPts(i,:) = rotMat2D * [rotPts(i,1),rotPts(i,2),rotPts(i,3)]';
end

%Error from each point
ptErr = sqrt((finPts(:,1)-trueRelLocX').^2 + (finPts(:,2)-trueRelLocY').^2 + (finPts(:,3)-trueRelLocZ').^2);
%%
%Plotting
figure
scatter3(worldCoordsclean(:,1),worldCoordsclean(:,2),worldCoordsclean(:,3),'o')
hold on
scatter3(relWorldCoords(:,1),relWorldCoords(:,2),relWorldCoords(:,3),'o')
xlabel('X (mm)')
ylabel('Y (mm)')
zlabel('Z (mm)')
title('World coordinates of accuracy measurements')
legend('Relative to camera','Relative to point 1')

figure
scatter3(trueRelLocX,trueRelLocY,trueRelLocZ,'o')
hold on
scatter3(relWorldCoords(:,1),relWorldCoords(:,2),relWorldCoords(:,3),'o')
xlabel('X (mm)')
ylabel('Y (mm)')
zlabel('Z (mm)')
title('World coordinates vs True coordinates')
legend('True','Measured')

figure
plot(trueDistFromStart,camDistFromStart,'o')
hold on
plot([0,210],[0,210],'k--')
xlabel('True distance from start (mm)')
ylabel('Measured distance from start (mm)')
legend('data','y=x')
title('Relative accuracy')
% 
% figure
% plot(measDistFromStart,camDistFromStart,'o')
% hold on
% plot([0,210],[0,210],'k--')
% xlabel('True distance from start (mm)')
% ylabel('Measured distance from start (mm)')
% legend('data','y=x')
% title('Relative accuracy')

figure
histogram(err)
xlabel('Distance error (mm)')
ylabel('Counts')
title('Histogram of error')


%Check out best fit plane
figure
plot3(worldCoordsclean(:,1),worldCoordsclean(:,2),worldCoordsclean(:,3),'o')
hold on
h=fill3(rectX,rectY,rectZ,'r');
set(h,'facealpha',0.5)
plot3(rotPts(:,1),rotPts(:,2),rotPts(:,3),'*')
k=fill3(rotRect(:,1),rotRect(:,2),rotRect(:,3),'b');
set(k,'facealpha',0.5);
plot3([0,30*normal(1)],[0,30*normal(2)],[B(3),B(3)+30*normal(3)],'linewidth',2)
axis equal

figure
plot3(trueRelLocX,trueRelLocY,trueRelLocZ,'o')
hold on
plot3(finPts(:,1),finPts(:,2),finPts(:,3),'*')
%plot3(x,y,z,'s')
xlabel('X (mm)')
ylabel('Y (mm)')
zlabel('Z (mm)')
legend('True position','Recovered position')
title('3D accuracy via plane fitting')
set(gca,'fontsize',18)
axis equal

figure
histogram(ptErr)


